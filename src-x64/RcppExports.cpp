// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sample_s
arma::vec sample_s(arma::vec h, double mu, double phi, double sigma_eta, double rho, arma::vec p, arma::vec m, arma::vec v, arma::vec a, arma::vec b, arma::vec Y_star, arma::vec d, int T);
RcppExport SEXP _SV_sample_s(SEXP hSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP rhoSEXP, SEXP pSEXP, SEXP mSEXP, SEXP vSEXP, SEXP aSEXP, SEXP bSEXP, SEXP Y_starSEXP, SEXP dSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y_star(Y_starSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_s(h, mu, phi, sigma_eta, rho, p, m, v, a, b, Y_star, d, T));
    return rcpp_result_gen;
END_RCPP
}
// kalman_filter
Rcpp::List kalman_filter(arma::vec s, double mu, double phi, double sigma_eta, double rho, arma::vec m, arma::vec v, arma::vec a, arma::vec b, arma::vec Y_star, arma::vec d, int T);
RcppExport SEXP _SV_kalman_filter(SEXP sSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP rhoSEXP, SEXP mSEXP, SEXP vSEXP, SEXP aSEXP, SEXP bSEXP, SEXP Y_starSEXP, SEXP dSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y_star(Y_starSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(kalman_filter(s, mu, phi, sigma_eta, rho, m, v, a, b, Y_star, d, T));
    return rcpp_result_gen;
END_RCPP
}
// sim_smoother
arma::vec sim_smoother(arma::vec s, double mu, double phi, double sigma_eta, double rho, arma::vec m, arma::vec v, arma::vec a, arma::vec b, arma::vec Y_star, arma::vec d, int T);
RcppExport SEXP _SV_sim_smoother(SEXP sSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP rhoSEXP, SEXP mSEXP, SEXP vSEXP, SEXP aSEXP, SEXP bSEXP, SEXP Y_starSEXP, SEXP dSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y_star(Y_starSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_smoother(s, mu, phi, sigma_eta, rho, m, v, a, b, Y_star, d, T));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihood
double loglikelihood(arma::vec s, double mu, double phi, double sigma_eta, double rho, arma::vec m, arma::vec v, arma::vec a, arma::vec b, arma::vec Y_star, arma::vec d, double mu_0, double sigma_0, double T);
RcppExport SEXP _SV_loglikelihood(SEXP sSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP rhoSEXP, SEXP mSEXP, SEXP vSEXP, SEXP aSEXP, SEXP bSEXP, SEXP Y_starSEXP, SEXP dSEXP, SEXP mu_0SEXP, SEXP sigma_0SEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y_star(Y_starSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_0(sigma_0SEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihood(s, mu, phi, sigma_eta, rho, m, v, a, b, Y_star, d, mu_0, sigma_0, T));
    return rcpp_result_gen;
END_RCPP
}
// calc_posterior_maximize
double calc_posterior_maximize(arma::vec x, double mu, arma::vec s, arma::vec m, arma::vec v, arma::vec a, arma::vec b, arma::vec Y_star, arma::vec d, double T, double mu_0, double sigma_0, double a_0, double b_0, double n_0, double S_0);
RcppExport SEXP _SV_calc_posterior_maximize(SEXP xSEXP, SEXP muSEXP, SEXP sSEXP, SEXP mSEXP, SEXP vSEXP, SEXP aSEXP, SEXP bSEXP, SEXP Y_starSEXP, SEXP dSEXP, SEXP TSEXP, SEXP mu_0SEXP, SEXP sigma_0SEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP n_0SEXP, SEXP S_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y_star(Y_starSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_0(sigma_0SEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type n_0(n_0SEXP);
    Rcpp::traits::input_parameter< double >::type S_0(S_0SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_posterior_maximize(x, mu, s, m, v, a, b, Y_star, d, T, mu_0, sigma_0, a_0, b_0, n_0, S_0));
    return rcpp_result_gen;
END_RCPP
}
// deriv1
arma::vec deriv1(arma::vec x, double mu, arma::vec s, arma::vec m, arma::vec v, arma::vec a, arma::vec b, arma::vec Y_star, arma::vec d, double T, double mu_0, double sigma_0, double a_0, double b_0, double n_0, double S_0);
RcppExport SEXP _SV_deriv1(SEXP xSEXP, SEXP muSEXP, SEXP sSEXP, SEXP mSEXP, SEXP vSEXP, SEXP aSEXP, SEXP bSEXP, SEXP Y_starSEXP, SEXP dSEXP, SEXP TSEXP, SEXP mu_0SEXP, SEXP sigma_0SEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP n_0SEXP, SEXP S_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y_star(Y_starSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_0(sigma_0SEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type n_0(n_0SEXP);
    Rcpp::traits::input_parameter< double >::type S_0(S_0SEXP);
    rcpp_result_gen = Rcpp::wrap(deriv1(x, mu, s, m, v, a, b, Y_star, d, T, mu_0, sigma_0, a_0, b_0, n_0, S_0));
    return rcpp_result_gen;
END_RCPP
}
// deriv2
arma::mat deriv2(arma::vec x, double mu, arma::vec s, arma::vec m, arma::vec v, arma::vec a, arma::vec b, arma::vec Y_star, arma::vec d, double T, double mu_0, double sigma_0, double a_0, double b_0, double n_0, double S_0);
RcppExport SEXP _SV_deriv2(SEXP xSEXP, SEXP muSEXP, SEXP sSEXP, SEXP mSEXP, SEXP vSEXP, SEXP aSEXP, SEXP bSEXP, SEXP Y_starSEXP, SEXP dSEXP, SEXP TSEXP, SEXP mu_0SEXP, SEXP sigma_0SEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP n_0SEXP, SEXP S_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y_star(Y_starSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_0(sigma_0SEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type n_0(n_0SEXP);
    Rcpp::traits::input_parameter< double >::type S_0(S_0SEXP);
    rcpp_result_gen = Rcpp::wrap(deriv2(x, mu, s, m, v, a, b, Y_star, d, T, mu_0, sigma_0, a_0, b_0, n_0, S_0));
    return rcpp_result_gen;
END_RCPP
}
// Opt
arma::vec Opt(arma::vec x, double mu, arma::vec s, arma::vec m, arma::vec v, arma::vec a, arma::vec b, arma::vec Y_star, arma::vec d, double T, double mu_0, double sigma_0, double a_0, double b_0, double n_0, double S_0);
RcppExport SEXP _SV_Opt(SEXP xSEXP, SEXP muSEXP, SEXP sSEXP, SEXP mSEXP, SEXP vSEXP, SEXP aSEXP, SEXP bSEXP, SEXP Y_starSEXP, SEXP dSEXP, SEXP TSEXP, SEXP mu_0SEXP, SEXP sigma_0SEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP n_0SEXP, SEXP S_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y_star(Y_starSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_0(sigma_0SEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type n_0(n_0SEXP);
    Rcpp::traits::input_parameter< double >::type S_0(S_0SEXP);
    rcpp_result_gen = Rcpp::wrap(Opt(x, mu, s, m, v, a, b, Y_star, d, T, mu_0, sigma_0, a_0, b_0, n_0, S_0));
    return rcpp_result_gen;
END_RCPP
}
// aug_kalman_filter
arma::vec aug_kalman_filter(arma::vec s, arma::vec m, arma::vec v, arma::vec a, arma::vec b, arma::vec Y_star, arma::vec d, int T, double mu, double mu_0, double sigma_0, double a_0, double b_0, double n_0, double S_0, bool call_r_opt_func);
RcppExport SEXP _SV_aug_kalman_filter(SEXP sSEXP, SEXP mSEXP, SEXP vSEXP, SEXP aSEXP, SEXP bSEXP, SEXP Y_starSEXP, SEXP dSEXP, SEXP TSEXP, SEXP muSEXP, SEXP mu_0SEXP, SEXP sigma_0SEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP n_0SEXP, SEXP S_0SEXP, SEXP call_r_opt_funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y_star(Y_starSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_0(sigma_0SEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type n_0(n_0SEXP);
    Rcpp::traits::input_parameter< double >::type S_0(S_0SEXP);
    Rcpp::traits::input_parameter< bool >::type call_r_opt_func(call_r_opt_funcSEXP);
    rcpp_result_gen = Rcpp::wrap(aug_kalman_filter(s, m, v, a, b, Y_star, d, T, mu, mu_0, sigma_0, a_0, b_0, n_0, S_0, call_r_opt_func));
    return rcpp_result_gen;
END_RCPP
}
// svmcmc
Rcpp::List svmcmc(arma::vec Y, bool call_r_opt_func);
RcppExport SEXP _SV_svmcmc(SEXP YSEXP, SEXP call_r_opt_funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< bool >::type call_r_opt_func(call_r_opt_funcSEXP);
    rcpp_result_gen = Rcpp::wrap(svmcmc(Y, call_r_opt_func));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SV_sample_s", (DL_FUNC) &_SV_sample_s, 13},
    {"_SV_kalman_filter", (DL_FUNC) &_SV_kalman_filter, 12},
    {"_SV_sim_smoother", (DL_FUNC) &_SV_sim_smoother, 12},
    {"_SV_loglikelihood", (DL_FUNC) &_SV_loglikelihood, 14},
    {"_SV_calc_posterior_maximize", (DL_FUNC) &_SV_calc_posterior_maximize, 16},
    {"_SV_deriv1", (DL_FUNC) &_SV_deriv1, 16},
    {"_SV_deriv2", (DL_FUNC) &_SV_deriv2, 16},
    {"_SV_Opt", (DL_FUNC) &_SV_Opt, 16},
    {"_SV_aug_kalman_filter", (DL_FUNC) &_SV_aug_kalman_filter, 16},
    {"_SV_svmcmc", (DL_FUNC) &_SV_svmcmc, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SV(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
